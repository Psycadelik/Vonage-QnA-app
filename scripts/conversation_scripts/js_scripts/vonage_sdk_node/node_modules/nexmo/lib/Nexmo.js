"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _Credentials = require("./Credentials");

var _Credentials2 = _interopRequireDefault(_Credentials);

var _JwtGenerator = require("./JwtGenerator");

var _JwtGenerator2 = _interopRequireDefault(_JwtGenerator);

var _HashGenerator = require("./HashGenerator");

var _HashGenerator2 = _interopRequireDefault(_HashGenerator);

var _Message = require("./Message");

var _Message2 = _interopRequireDefault(_Message);

var _Voice = require("./Voice");

var _Voice2 = _interopRequireDefault(_Voice);

var _Number = require("./Number");

var _Number2 = _interopRequireDefault(_Number);

var _Verify = require("./Verify");

var _Verify2 = _interopRequireDefault(_Verify);

var _NumberInsight = require("./NumberInsight");

var _NumberInsight2 = _interopRequireDefault(_NumberInsight);

var _App = require("./App");

var _App2 = _interopRequireDefault(_App);

var _Account = require("./Account");

var _Account2 = _interopRequireDefault(_Account);

var _CallsResource = require("./CallsResource");

var _CallsResource2 = _interopRequireDefault(_CallsResource);

var _Conversations = require("./Conversations");

var _Conversations2 = _interopRequireDefault(_Conversations);

var _Users = require("./Users");

var _Users2 = _interopRequireDefault(_Users);

var _FilesResource = require("./FilesResource");

var _FilesResource2 = _interopRequireDefault(_FilesResource);

var _Conversion = require("./Conversion");

var _Conversion2 = _interopRequireDefault(_Conversion);

var _Media = require("./Media");

var _Media2 = _interopRequireDefault(_Media);

var _Redact = require("./Redact");

var _Redact2 = _interopRequireDefault(_Redact);

var _Channel = require("./Channel");

var _Channel2 = _interopRequireDefault(_Channel);

var _Dispatch = require("./Dispatch");

var _Dispatch2 = _interopRequireDefault(_Dispatch);

var _Pricing = require("./Pricing");

var _Pricing2 = _interopRequireDefault(_Pricing);

var _HttpClient = require("./HttpClient");

var _HttpClient2 = _interopRequireDefault(_HttpClient);

var _NullLogger = require("./NullLogger");

var _NullLogger2 = _interopRequireDefault(_NullLogger);

var _ConsoleLogger = require("./ConsoleLogger");

var _ConsoleLogger2 = _interopRequireDefault(_ConsoleLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var jwtGeneratorInstance = new _JwtGenerator2.default();
var hashGeneratorInstance = new _HashGenerator2.default();

var Nexmo = function () {
  /**
   * @param {Credentials} credentials - Nexmo API credentials
   * @param {string} credentials.apiKey - the Nexmo API key
   * @param {string} credentials.apiSecret - the Nexmo API secret
   * @param {Object} options - Additional options
   * @param {boolean} options.debug - `true` to turn on debug logging
   * @param {Object} options.logger - Set a custom logger.
   * @param {string} options.appendToUserAgent - A value to append to the user agent.
   *                    The value will be prefixed with a `/`
   */
  function Nexmo(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { debug: false };

    _classCallCheck(this, Nexmo);

    this.credentials = _Credentials2.default.parse(credentials);
    this.options = options;

    // If no logger has been supplied but debug has been set
    // default to using the ConsoleLogger
    if (!this.options.logger && this.options.debug) {
      this.options.logger = new _ConsoleLogger2.default();
    } else if (!this.options.logger) {
      // Swallow the logging
      this.options.logger = new _NullLogger2.default();
    }

    var userAgent = "nexmo-node/UNKNOWN node/UNKNOWN";
    try {
      var packageDetails = require(_path2.default.join(__dirname, "..", "package.json"));
      userAgent = "nexmo-node/" + packageDetails.version + " node/" + process.version.replace("v", "");
    } catch (e) {
      console.warn("Could not load package details");
    }
    this.options.userAgent = userAgent;
    if (this.options.appendToUserAgent) {
      this.options.userAgent += " " + this.options.appendToUserAgent;
    }

    // This is legacy, everything should use rest or api going forward
    this.options.httpClient = new _HttpClient2.default(Object.assign({ host: this.options.restHost || "rest.nexmo.com" }, this.options), this.credentials);

    // We have two different hosts, so we use two different HttpClients
    this.options.api = new _HttpClient2.default(Object.assign({ host: this.options.apiHost || "api.nexmo.com" }, this.options), this.credentials);
    this.options.rest = new _HttpClient2.default(Object.assign({ host: this.options.restHost || "rest.nexmo.com" }, this.options), this.credentials);

    this.message = new _Message2.default(this.credentials, this.options);
    this.voice = new _Voice2.default(this.credentials, this.options);
    this.number = new _Number2.default(this.credentials, this.options);
    this.verify = new _Verify2.default(this.credentials, this.options);
    this.numberInsight = new _NumberInsight2.default(this.credentials, this.options);
    this.applications = new _App2.default(this.credentials, this.options);
    this.account = new _Account2.default(this.credentials, this.options);
    this.calls = new _CallsResource2.default(this.credentials, this.options);
    this.conversations = new _Conversations2.default(this.credentials, this.options);
    this.users = new _Users2.default(this.credentials, this.options);
    this.files = new _FilesResource2.default(this.credentials, this.options);
    this.conversion = new _Conversion2.default(this.credentials, this.options);
    this.media = new _Media2.default(this.credentials, this.options);
    this.redact = new _Redact2.default(this.credentials, this.options);
    this.channel = new _Channel2.default(this.credentials, this.options);
    this.dispatch = new _Dispatch2.default(this.credentials, this.options);
    this.pricing = new _Pricing2.default(this.credentials, this.options);

    /**
     * @deprecated Please use nexmo.applications
     */
    this.app = this.applications;
  }

  /**
   * Generate a JSON Web Token (JWT).
   *
   * The private key used upon Nexmo instance construction will be used to sign
   * the JWT. The application_id you used upon Nexmo instance creation will be
   * included in the claims for the JWT, however this can be overridden by passing
   * an application_id as part of the claims.
   *
   * @param {Object} claims - name/value pair claims to sign within the JWT
   *
   * @returns {String} the generated token
   */

  _createClass(Nexmo, [{
    key: "generateJwt",
    value: function generateJwt() {
      var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (claims.application_id === undefined) {
        claims.application_id = this.credentials.applicationId;
      }
      return Nexmo.generateJwt(this.credentials.privateKey, claims);
    }

    /**
     * Generate a Signature Hash.
     *
     * @param {Object} params - params to generate hash from
     *
     * @returns {String} the generated token
     */

  }, {
    key: "generateSignature",
    value: function generateSignature(params) {
      return this.credentials.generateSignature(params);
    }
  }]);

  return Nexmo;
}();

/**
 * Generate a JSON Web Token (JWT).
 *
 * @param {String|Buffer} privateKey - the path to the private key certificate
 *          to be used when signing the claims.
 * @param {Object} claims - name/value pair claims to sign within the JWT
 *
 * @returns {String} the generated token
 */


Nexmo.generateJwt = function (privateKey, claims) {
  if (!(privateKey instanceof Buffer)) {
    if (!_fs2.default.existsSync(privateKey)) {
      throw new Error("File \"" + privateKey + "\" not found.");
    } else {
      privateKey = _fs2.default.readFileSync(privateKey);
    }
  }
  return jwtGeneratorInstance.generate(privateKey, claims);
};

/**
 * Generate a Signature Hash.
 *
 * @param {String} method - the method to be used when creating the hash
 * @param {String} secret - the secret to be used when creating the hash
 * @param {Object} params - params to generate hash from
 *
 * @returns {String} the generated token
 */
Nexmo.generateSignature = function (method, secret, params) {
  return hashGeneratorInstance.generate(method, secret, params);
};

exports.default = Nexmo;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OZXhtby5qcyJdLCJuYW1lcyI6WyJqd3RHZW5lcmF0b3JJbnN0YW5jZSIsImhhc2hHZW5lcmF0b3JJbnN0YW5jZSIsIk5leG1vIiwiY3JlZGVudGlhbHMiLCJvcHRpb25zIiwiZGVidWciLCJwYXJzZSIsImxvZ2dlciIsInVzZXJBZ2VudCIsInBhY2thZ2VEZXRhaWxzIiwicmVxdWlyZSIsImpvaW4iLCJfX2Rpcm5hbWUiLCJ2ZXJzaW9uIiwicHJvY2VzcyIsInJlcGxhY2UiLCJlIiwiY29uc29sZSIsIndhcm4iLCJhcHBlbmRUb1VzZXJBZ2VudCIsImh0dHBDbGllbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJob3N0IiwicmVzdEhvc3QiLCJhcGkiLCJhcGlIb3N0IiwicmVzdCIsIm1lc3NhZ2UiLCJ2b2ljZSIsIm51bWJlciIsInZlcmlmeSIsIm51bWJlckluc2lnaHQiLCJhcHBsaWNhdGlvbnMiLCJhY2NvdW50IiwiY2FsbHMiLCJjb252ZXJzYXRpb25zIiwidXNlcnMiLCJmaWxlcyIsImNvbnZlcnNpb24iLCJtZWRpYSIsInJlZGFjdCIsImNoYW5uZWwiLCJkaXNwYXRjaCIsInByaWNpbmciLCJhcHAiLCJjbGFpbXMiLCJhcHBsaWNhdGlvbl9pZCIsInVuZGVmaW5lZCIsImFwcGxpY2F0aW9uSWQiLCJnZW5lcmF0ZUp3dCIsInByaXZhdGVLZXkiLCJwYXJhbXMiLCJnZW5lcmF0ZVNpZ25hdHVyZSIsIkJ1ZmZlciIsImV4aXN0c1N5bmMiLCJFcnJvciIsInJlYWRGaWxlU3luYyIsImdlbmVyYXRlIiwibWV0aG9kIiwic2VjcmV0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLHVCQUF1Qiw0QkFBN0I7QUFDQSxJQUFNQyx3QkFBd0IsNkJBQTlCOztJQUVNQyxLO0FBQ0o7Ozs7Ozs7Ozs7QUFVQSxpQkFBWUMsV0FBWixFQUFxRDtBQUFBLFFBQTVCQyxPQUE0Qix1RUFBbEIsRUFBRUMsT0FBTyxLQUFULEVBQWtCOztBQUFBOztBQUNuRCxTQUFLRixXQUFMLEdBQW1CLHNCQUFZRyxLQUFaLENBQWtCSCxXQUFsQixDQUFuQjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFFQTtBQUNBO0FBQ0EsUUFBSSxDQUFDLEtBQUtBLE9BQUwsQ0FBYUcsTUFBZCxJQUF3QixLQUFLSCxPQUFMLENBQWFDLEtBQXpDLEVBQWdEO0FBQzlDLFdBQUtELE9BQUwsQ0FBYUcsTUFBYixHQUFzQiw2QkFBdEI7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDLEtBQUtILE9BQUwsQ0FBYUcsTUFBbEIsRUFBMEI7QUFDL0I7QUFDQSxXQUFLSCxPQUFMLENBQWFHLE1BQWIsR0FBc0IsMEJBQXRCO0FBQ0Q7O0FBRUQsUUFBSUMsWUFBWSxpQ0FBaEI7QUFDQSxRQUFJO0FBQ0YsVUFBSUMsaUJBQWlCQyxRQUFRLGVBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUFSLENBQXJCO0FBQ0FKLGtDQUNFQyxlQUFlSSxPQURqQixjQUVTQyxRQUFRRCxPQUFSLENBQWdCRSxPQUFoQixDQUF3QixHQUF4QixFQUE2QixFQUE3QixDQUZUO0FBR0QsS0FMRCxDQUtFLE9BQU9DLENBQVAsRUFBVTtBQUNWQyxjQUFRQyxJQUFSLENBQWEsZ0NBQWI7QUFDRDtBQUNELFNBQUtkLE9BQUwsQ0FBYUksU0FBYixHQUF5QkEsU0FBekI7QUFDQSxRQUFJLEtBQUtKLE9BQUwsQ0FBYWUsaUJBQWpCLEVBQW9DO0FBQ2xDLFdBQUtmLE9BQUwsQ0FBYUksU0FBYixVQUE4QixLQUFLSixPQUFMLENBQWFlLGlCQUEzQztBQUNEOztBQUVEO0FBQ0EsU0FBS2YsT0FBTCxDQUFhZ0IsVUFBYixHQUEwQix5QkFDeEJDLE9BQU9DLE1BQVAsQ0FDRSxFQUFFQyxNQUFNLEtBQUtuQixPQUFMLENBQWFvQixRQUFiLElBQXlCLGdCQUFqQyxFQURGLEVBRUUsS0FBS3BCLE9BRlAsQ0FEd0IsRUFLeEIsS0FBS0QsV0FMbUIsQ0FBMUI7O0FBUUE7QUFDQSxTQUFLQyxPQUFMLENBQWFxQixHQUFiLEdBQW1CLHlCQUNqQkosT0FBT0MsTUFBUCxDQUNFLEVBQUVDLE1BQU0sS0FBS25CLE9BQUwsQ0FBYXNCLE9BQWIsSUFBd0IsZUFBaEMsRUFERixFQUVFLEtBQUt0QixPQUZQLENBRGlCLEVBS2pCLEtBQUtELFdBTFksQ0FBbkI7QUFPQSxTQUFLQyxPQUFMLENBQWF1QixJQUFiLEdBQW9CLHlCQUNsQk4sT0FBT0MsTUFBUCxDQUNFLEVBQUVDLE1BQU0sS0FBS25CLE9BQUwsQ0FBYW9CLFFBQWIsSUFBeUIsZ0JBQWpDLEVBREYsRUFFRSxLQUFLcEIsT0FGUCxDQURrQixFQUtsQixLQUFLRCxXQUxhLENBQXBCOztBQVFBLFNBQUt5QixPQUFMLEdBQWUsc0JBQVksS0FBS3pCLFdBQWpCLEVBQThCLEtBQUtDLE9BQW5DLENBQWY7QUFDQSxTQUFLeUIsS0FBTCxHQUFhLG9CQUFVLEtBQUsxQixXQUFmLEVBQTRCLEtBQUtDLE9BQWpDLENBQWI7QUFDQSxTQUFLMEIsTUFBTCxHQUFjLHFCQUFXLEtBQUszQixXQUFoQixFQUE2QixLQUFLQyxPQUFsQyxDQUFkO0FBQ0EsU0FBSzJCLE1BQUwsR0FBYyxxQkFBVyxLQUFLNUIsV0FBaEIsRUFBNkIsS0FBS0MsT0FBbEMsQ0FBZDtBQUNBLFNBQUs0QixhQUFMLEdBQXFCLDRCQUFrQixLQUFLN0IsV0FBdkIsRUFBb0MsS0FBS0MsT0FBekMsQ0FBckI7QUFDQSxTQUFLNkIsWUFBTCxHQUFvQixrQkFBUSxLQUFLOUIsV0FBYixFQUEwQixLQUFLQyxPQUEvQixDQUFwQjtBQUNBLFNBQUs4QixPQUFMLEdBQWUsc0JBQVksS0FBSy9CLFdBQWpCLEVBQThCLEtBQUtDLE9BQW5DLENBQWY7QUFDQSxTQUFLK0IsS0FBTCxHQUFhLDRCQUFrQixLQUFLaEMsV0FBdkIsRUFBb0MsS0FBS0MsT0FBekMsQ0FBYjtBQUNBLFNBQUtnQyxhQUFMLEdBQXFCLDRCQUFrQixLQUFLakMsV0FBdkIsRUFBb0MsS0FBS0MsT0FBekMsQ0FBckI7QUFDQSxTQUFLaUMsS0FBTCxHQUFhLG9CQUFVLEtBQUtsQyxXQUFmLEVBQTRCLEtBQUtDLE9BQWpDLENBQWI7QUFDQSxTQUFLa0MsS0FBTCxHQUFhLDRCQUFrQixLQUFLbkMsV0FBdkIsRUFBb0MsS0FBS0MsT0FBekMsQ0FBYjtBQUNBLFNBQUttQyxVQUFMLEdBQWtCLHlCQUFlLEtBQUtwQyxXQUFwQixFQUFpQyxLQUFLQyxPQUF0QyxDQUFsQjtBQUNBLFNBQUtvQyxLQUFMLEdBQWEsb0JBQVUsS0FBS3JDLFdBQWYsRUFBNEIsS0FBS0MsT0FBakMsQ0FBYjtBQUNBLFNBQUtxQyxNQUFMLEdBQWMscUJBQVcsS0FBS3RDLFdBQWhCLEVBQTZCLEtBQUtDLE9BQWxDLENBQWQ7QUFDQSxTQUFLc0MsT0FBTCxHQUFlLHNCQUFZLEtBQUt2QyxXQUFqQixFQUE4QixLQUFLQyxPQUFuQyxDQUFmO0FBQ0EsU0FBS3VDLFFBQUwsR0FBZ0IsdUJBQWEsS0FBS3hDLFdBQWxCLEVBQStCLEtBQUtDLE9BQXBDLENBQWhCO0FBQ0EsU0FBS3dDLE9BQUwsR0FBZSxzQkFBWSxLQUFLekMsV0FBakIsRUFBOEIsS0FBS0MsT0FBbkMsQ0FBZjs7QUFFQTs7O0FBR0EsU0FBS3lDLEdBQUwsR0FBVyxLQUFLWixZQUFoQjtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7a0NBYXlCO0FBQUEsVUFBYmEsTUFBYSx1RUFBSixFQUFJOztBQUN2QixVQUFJQSxPQUFPQyxjQUFQLEtBQTBCQyxTQUE5QixFQUF5QztBQUN2Q0YsZUFBT0MsY0FBUCxHQUF3QixLQUFLNUMsV0FBTCxDQUFpQjhDLGFBQXpDO0FBQ0Q7QUFDRCxhQUFPL0MsTUFBTWdELFdBQU4sQ0FBa0IsS0FBSy9DLFdBQUwsQ0FBaUJnRCxVQUFuQyxFQUErQ0wsTUFBL0MsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7O3NDQU9rQk0sTSxFQUFRO0FBQ3hCLGFBQU8sS0FBS2pELFdBQUwsQ0FBaUJrRCxpQkFBakIsQ0FBbUNELE1BQW5DLENBQVA7QUFDRDs7Ozs7O0FBR0g7Ozs7Ozs7Ozs7O0FBU0FsRCxNQUFNZ0QsV0FBTixHQUFvQixVQUFDQyxVQUFELEVBQWFMLE1BQWIsRUFBd0I7QUFDMUMsTUFBSSxFQUFFSyxzQkFBc0JHLE1BQXhCLENBQUosRUFBcUM7QUFDbkMsUUFBSSxDQUFDLGFBQUdDLFVBQUgsQ0FBY0osVUFBZCxDQUFMLEVBQWdDO0FBQzlCLFlBQU0sSUFBSUssS0FBSixhQUFtQkwsVUFBbkIsbUJBQU47QUFDRCxLQUZELE1BRU87QUFDTEEsbUJBQWEsYUFBR00sWUFBSCxDQUFnQk4sVUFBaEIsQ0FBYjtBQUNEO0FBQ0Y7QUFDRCxTQUFPbkQscUJBQXFCMEQsUUFBckIsQ0FBOEJQLFVBQTlCLEVBQTBDTCxNQUExQyxDQUFQO0FBQ0QsQ0FURDs7QUFXQTs7Ozs7Ozs7O0FBU0E1QyxNQUFNbUQsaUJBQU4sR0FBMEIsVUFBQ00sTUFBRCxFQUFTQyxNQUFULEVBQWlCUixNQUFqQixFQUE0QjtBQUNwRCxTQUFPbkQsc0JBQXNCeUQsUUFBdEIsQ0FBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQ1IsTUFBL0MsQ0FBUDtBQUNELENBRkQ7O2tCQUllbEQsSyIsImZpbGUiOiJOZXhtby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbmltcG9ydCBDcmVkZW50aWFscyBmcm9tIFwiLi9DcmVkZW50aWFsc1wiO1xuaW1wb3J0IEp3dEdlbmVyYXRvciBmcm9tIFwiLi9Kd3RHZW5lcmF0b3JcIjtcbmltcG9ydCBIYXNoR2VuZXJhdG9yIGZyb20gXCIuL0hhc2hHZW5lcmF0b3JcIjtcbmltcG9ydCBNZXNzYWdlIGZyb20gXCIuL01lc3NhZ2VcIjtcbmltcG9ydCBWb2ljZSBmcm9tIFwiLi9Wb2ljZVwiO1xuaW1wb3J0IE51bWJlciBmcm9tIFwiLi9OdW1iZXJcIjtcbmltcG9ydCBWZXJpZnkgZnJvbSBcIi4vVmVyaWZ5XCI7XG5pbXBvcnQgTnVtYmVySW5zaWdodCBmcm9tIFwiLi9OdW1iZXJJbnNpZ2h0XCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IEFjY291bnQgZnJvbSBcIi4vQWNjb3VudFwiO1xuaW1wb3J0IENhbGxzUmVzb3VyY2UgZnJvbSBcIi4vQ2FsbHNSZXNvdXJjZVwiO1xuaW1wb3J0IENvbnZlcnNhdGlvbnMgZnJvbSBcIi4vQ29udmVyc2F0aW9uc1wiO1xuaW1wb3J0IFVzZXJzIGZyb20gXCIuL1VzZXJzXCI7XG5pbXBvcnQgRmlsZXNSZXNvdXJjZSBmcm9tIFwiLi9GaWxlc1Jlc291cmNlXCI7XG5pbXBvcnQgQ29udmVyc2lvbiBmcm9tIFwiLi9Db252ZXJzaW9uXCI7XG5pbXBvcnQgTWVkaWEgZnJvbSBcIi4vTWVkaWFcIjtcbmltcG9ydCBSZWRhY3QgZnJvbSBcIi4vUmVkYWN0XCI7XG5pbXBvcnQgQ2hhbm5lbCBmcm9tIFwiLi9DaGFubmVsXCI7XG5pbXBvcnQgRGlzcGF0Y2ggZnJvbSBcIi4vRGlzcGF0Y2hcIjtcbmltcG9ydCBQcmljaW5nIGZyb20gXCIuL1ByaWNpbmdcIjtcbmltcG9ydCBIdHRwQ2xpZW50IGZyb20gXCIuL0h0dHBDbGllbnRcIjtcbmltcG9ydCBOdWxsTG9nZ2VyIGZyb20gXCIuL051bGxMb2dnZXJcIjtcbmltcG9ydCBDb25zb2xlTG9nZ2VyIGZyb20gXCIuL0NvbnNvbGVMb2dnZXJcIjtcblxuY29uc3Qgand0R2VuZXJhdG9ySW5zdGFuY2UgPSBuZXcgSnd0R2VuZXJhdG9yKCk7XG5jb25zdCBoYXNoR2VuZXJhdG9ySW5zdGFuY2UgPSBuZXcgSGFzaEdlbmVyYXRvcigpO1xuXG5jbGFzcyBOZXhtbyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkZW50aWFscyAtIE5leG1vIEFQSSBjcmVkZW50aWFsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gY3JlZGVudGlhbHMuYXBpS2V5IC0gdGhlIE5leG1vIEFQSSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNyZWRlbnRpYWxzLmFwaVNlY3JldCAtIHRoZSBOZXhtbyBBUEkgc2VjcmV0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5kZWJ1ZyAtIGB0cnVlYCB0byB0dXJuIG9uIGRlYnVnIGxvZ2dpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMubG9nZ2VyIC0gU2V0IGEgY3VzdG9tIGxvZ2dlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnQgLSBBIHZhbHVlIHRvIGFwcGVuZCB0byB0aGUgdXNlciBhZ2VudC5cbiAgICogICAgICAgICAgICAgICAgICAgIFRoZSB2YWx1ZSB3aWxsIGJlIHByZWZpeGVkIHdpdGggYSBgL2BcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zID0geyBkZWJ1ZzogZmFsc2UgfSkge1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBDcmVkZW50aWFscy5wYXJzZShjcmVkZW50aWFscyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIElmIG5vIGxvZ2dlciBoYXMgYmVlbiBzdXBwbGllZCBidXQgZGVidWcgaGFzIGJlZW4gc2V0XG4gICAgLy8gZGVmYXVsdCB0byB1c2luZyB0aGUgQ29uc29sZUxvZ2dlclxuICAgIGlmICghdGhpcy5vcHRpb25zLmxvZ2dlciAmJiB0aGlzLm9wdGlvbnMuZGVidWcpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5sb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dlcigpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5sb2dnZXIpIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGxvZ2dpbmdcbiAgICAgIHRoaXMub3B0aW9ucy5sb2dnZXIgPSBuZXcgTnVsbExvZ2dlcigpO1xuICAgIH1cblxuICAgIGxldCB1c2VyQWdlbnQgPSBcIm5leG1vLW5vZGUvVU5LTk9XTiBub2RlL1VOS05PV05cIjtcbiAgICB0cnkge1xuICAgICAgdmFyIHBhY2thZ2VEZXRhaWxzID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwicGFja2FnZS5qc29uXCIpKTtcbiAgICAgIHVzZXJBZ2VudCA9IGBuZXhtby1ub2RlLyR7XG4gICAgICAgIHBhY2thZ2VEZXRhaWxzLnZlcnNpb25cbiAgICAgIH0gbm9kZS8ke3Byb2Nlc3MudmVyc2lvbi5yZXBsYWNlKFwidlwiLCBcIlwiKX1gO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBsb2FkIHBhY2thZ2UgZGV0YWlsc1wiKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLnVzZXJBZ2VudCA9IHVzZXJBZ2VudDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFwcGVuZFRvVXNlckFnZW50KSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXNlckFnZW50ICs9IGAgJHt0aGlzLm9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnR9YDtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGxlZ2FjeSwgZXZlcnl0aGluZyBzaG91bGQgdXNlIHJlc3Qgb3IgYXBpIGdvaW5nIGZvcndhcmRcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgeyBob3N0OiB0aGlzLm9wdGlvbnMucmVzdEhvc3QgfHwgXCJyZXN0Lm5leG1vLmNvbVwiIH0sXG4gICAgICAgIHRoaXMub3B0aW9uc1xuICAgICAgKSxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHNcbiAgICApO1xuXG4gICAgLy8gV2UgaGF2ZSB0d28gZGlmZmVyZW50IGhvc3RzLCBzbyB3ZSB1c2UgdHdvIGRpZmZlcmVudCBIdHRwQ2xpZW50c1xuICAgIHRoaXMub3B0aW9ucy5hcGkgPSBuZXcgSHR0cENsaWVudChcbiAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHsgaG9zdDogdGhpcy5vcHRpb25zLmFwaUhvc3QgfHwgXCJhcGkubmV4bW8uY29tXCIgfSxcbiAgICAgICAgdGhpcy5vcHRpb25zXG4gICAgICApLFxuICAgICAgdGhpcy5jcmVkZW50aWFsc1xuICAgICk7XG4gICAgdGhpcy5vcHRpb25zLnJlc3QgPSBuZXcgSHR0cENsaWVudChcbiAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHsgaG9zdDogdGhpcy5vcHRpb25zLnJlc3RIb3N0IHx8IFwicmVzdC5uZXhtby5jb21cIiB9LFxuICAgICAgICB0aGlzLm9wdGlvbnNcbiAgICAgICksXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzXG4gICAgKTtcblxuICAgIHRoaXMubWVzc2FnZSA9IG5ldyBNZXNzYWdlKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy52b2ljZSA9IG5ldyBWb2ljZSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMubnVtYmVyID0gbmV3IE51bWJlcih0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMudmVyaWZ5ID0gbmV3IFZlcmlmeSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMubnVtYmVySW5zaWdodCA9IG5ldyBOdW1iZXJJbnNpZ2h0KHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnMgPSBuZXcgQXBwKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5hY2NvdW50ID0gbmV3IEFjY291bnQodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmNhbGxzID0gbmV3IENhbGxzUmVzb3VyY2UodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmNvbnZlcnNhdGlvbnMgPSBuZXcgQ29udmVyc2F0aW9ucyh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMudXNlcnMgPSBuZXcgVXNlcnModGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmZpbGVzID0gbmV3IEZpbGVzUmVzb3VyY2UodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmNvbnZlcnNpb24gPSBuZXcgQ29udmVyc2lvbih0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMubWVkaWEgPSBuZXcgTWVkaWEodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLnJlZGFjdCA9IG5ldyBSZWRhY3QodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmNoYW5uZWwgPSBuZXcgQ2hhbm5lbCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuZGlzcGF0Y2ggPSBuZXcgRGlzcGF0Y2godGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLnByaWNpbmcgPSBuZXcgUHJpY2luZyh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBuZXhtby5hcHBsaWNhdGlvbnNcbiAgICAgKi9cbiAgICB0aGlzLmFwcCA9IHRoaXMuYXBwbGljYXRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgSlNPTiBXZWIgVG9rZW4gKEpXVCkuXG4gICAqXG4gICAqIFRoZSBwcml2YXRlIGtleSB1c2VkIHVwb24gTmV4bW8gaW5zdGFuY2UgY29uc3RydWN0aW9uIHdpbGwgYmUgdXNlZCB0byBzaWduXG4gICAqIHRoZSBKV1QuIFRoZSBhcHBsaWNhdGlvbl9pZCB5b3UgdXNlZCB1cG9uIE5leG1vIGluc3RhbmNlIGNyZWF0aW9uIHdpbGwgYmVcbiAgICogaW5jbHVkZWQgaW4gdGhlIGNsYWltcyBmb3IgdGhlIEpXVCwgaG93ZXZlciB0aGlzIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHBhc3NpbmdcbiAgICogYW4gYXBwbGljYXRpb25faWQgYXMgcGFydCBvZiB0aGUgY2xhaW1zLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2xhaW1zIC0gbmFtZS92YWx1ZSBwYWlyIGNsYWltcyB0byBzaWduIHdpdGhpbiB0aGUgSldUXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAgICovXG5cbiAgZ2VuZXJhdGVKd3QoY2xhaW1zID0ge30pIHtcbiAgICBpZiAoY2xhaW1zLmFwcGxpY2F0aW9uX2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsYWltcy5hcHBsaWNhdGlvbl9pZCA9IHRoaXMuY3JlZGVudGlhbHMuYXBwbGljYXRpb25JZDtcbiAgICB9XG4gICAgcmV0dXJuIE5leG1vLmdlbmVyYXRlSnd0KHRoaXMuY3JlZGVudGlhbHMucHJpdmF0ZUtleSwgY2xhaW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFNpZ25hdHVyZSBIYXNoLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcGFyYW1zIHRvIGdlbmVyYXRlIGhhc2ggZnJvbVxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gICAqL1xuICBnZW5lcmF0ZVNpZ25hdHVyZShwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5nZW5lcmF0ZVNpZ25hdHVyZShwYXJhbXMpO1xuICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBKU09OIFdlYiBUb2tlbiAoSldUKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xCdWZmZXJ9IHByaXZhdGVLZXkgLSB0aGUgcGF0aCB0byB0aGUgcHJpdmF0ZSBrZXkgY2VydGlmaWNhdGVcbiAqICAgICAgICAgIHRvIGJlIHVzZWQgd2hlbiBzaWduaW5nIHRoZSBjbGFpbXMuXG4gKiBAcGFyYW0ge09iamVjdH0gY2xhaW1zIC0gbmFtZS92YWx1ZSBwYWlyIGNsYWltcyB0byBzaWduIHdpdGhpbiB0aGUgSldUXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICovXG5OZXhtby5nZW5lcmF0ZUp3dCA9IChwcml2YXRlS2V5LCBjbGFpbXMpID0+IHtcbiAgaWYgKCEocHJpdmF0ZUtleSBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMocHJpdmF0ZUtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSBcIiR7cHJpdmF0ZUtleX1cIiBub3QgZm91bmQuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaXZhdGVLZXkgPSBmcy5yZWFkRmlsZVN5bmMocHJpdmF0ZUtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBqd3RHZW5lcmF0b3JJbnN0YW5jZS5nZW5lcmF0ZShwcml2YXRlS2V5LCBjbGFpbXMpO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIFNpZ25hdHVyZSBIYXNoLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgLSB0aGUgbWV0aG9kIHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgaGFzaFxuICogQHBhcmFtIHtTdHJpbmd9IHNlY3JldCAtIHRoZSBzZWNyZXQgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBoYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcGFyYW1zIHRvIGdlbmVyYXRlIGhhc2ggZnJvbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAqL1xuTmV4bW8uZ2VuZXJhdGVTaWduYXR1cmUgPSAobWV0aG9kLCBzZWNyZXQsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gaGFzaEdlbmVyYXRvckluc3RhbmNlLmdlbmVyYXRlKG1ldGhvZCwgc2VjcmV0LCBwYXJhbXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV4bW87XG4iXX0=